import fnmatch
import os
import platform

progName = 'nur'

#opts = Options('SCustomize')
#opts.Add('debug', 'Build with debugging symbols', 0)
opt = Variables()
opt.Add('debug', help='Build with debugging symbols', default=0)
#opt.AddVariables(
#        ('debug', '', 0),
#        )

matches = []
for root, dirnames, filenames in os.walk('.'):
  for filename in fnmatch.filter(filenames, '*.c'):
      matches.append(os.path.join(root, filename))

env = Environment(variables=opt, CPPPATH = ['.', '../lib/external/include'], CFLAGS=['-std=c99'], ENV = os.environ)

print "platform is :" + str(platform.system())

if(platform.system() == "Linux"):

    #Generic
    env.Append(CFLAGS = ['-L ../lib/external/arch64/lib'])
    env.Append(LIBS = ['GL', 'SDL', 'SDL_image', 'SDL_mixer', 'm', 'libchipmunk.a'])
    env.ParseConfig('sdl-config --cflags')
    env.ParseConfig('sdl-config --libs')
    env.ParseConfig('freealut-config --cflags')
    env.ParseConfig('freealut-config --libs')

    #Release build.
    rel = env.Clone()
    env.Append(CFLAGS = ['-O3'])

    objs = []
    for cfile in matches:
        objs.append(env.Object(cfile.split('.c')[0]+'-rel', cfile))
    env.Program(progName, objs)

    #Debug
    envDebug = env.Clone()
    envDebug.Append(CFLAGS = ['-g', '-Werror', '-DDEBUG'])

    objs = []
    for cfile in matches:
        objs.append(envDebug.Object(cfile.split('.c')[0]+'-dbg', cfile))
    envDebug.Program('%s_%s' % (progName, 'debug'), matches)

else:

    #env.Replace(CC = "gcc")
    Tool('mingw')(env)

    env.Append(CFLAGS = ['-L ../lib/external/win32/lib'])


    debug = env.get('debug',1)

    if debug=='1':
        env.Append(CFLAGS = ['-g', '-Werror'])
    else:
        env.Append(CFLAGS = ['-O3'])

    env.Append(CFLAGS = '-nologo')

    #env.Append(LIBS = ['GL', 'm', File('../lib/external/lib/win32/libSDLmain.a'), File('../lib/external/lib/win32/SDL.lib'), File('../lib/external/lib/win32/chipmunk.lib'), File('../lib/external/lib/win32/alut.lib'), 'SDL_image'])
    env.Append(LIBS = ['GL', 'm', 'SDLmain', 'SDL', 'SDL_image', 'chipmunk', 'alut'])

    env.Program('pmuj', matches)
